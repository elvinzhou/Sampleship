{"version":3,"sources":["context/user-context.js","components/lib.js","App.js","context/AppProviders.js","index.js","components/AuthContext/authContext.js"],"names":["UserContext","React","createContext","UserProvider","props","user","useAuth","Provider","value","FullPageSpinner","css","fontSize","height","display","flexDirection","justifyContent","alignItems","Spinner","spin","keyframes","transform","FaSpinner","animation","defaultProps","AuthenticatedApp","lazy","Login","App","context","useContext","undefined","Error","useUser","Suspense","fallback","AppProviders","children","ReactDOM","render","document","getElementById","AuthContext","AuthProvider","useSWR","data","error","mutate","googleLogIn","googleData","a","fetch","method","body","JSON","stringify","token","tokenId","headers","res","json","logOut"],"mappings":"2NAGMA,EAAcC,IAAMC,gBAE1B,SAASC,EAAaC,GACpB,IAAOC,EAAQC,cAARD,KACP,OAAO,cAACL,EAAYO,SAAb,aAAsBC,MAAOH,GAAUD,I,4BCHjC,SAASK,IACtB,OACE,qBACEC,IAAK,CACHC,SAAU,MACVC,OAAQ,QACRC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,cAACC,EAAD,MAKN,IAAMC,EAAOC,YAAU,CACrB,KAAM,CAACC,UAAW,gBAClB,OAAQ,CAACA,UAAW,oBAIhBH,EAAU,YAAOI,IAAP,qBAAkB,CAChCC,UAAU,GAAD,OAAKJ,EAAL,wBADK,IAGhBD,EAAQM,aAAe,CACrB,aAAc,WC3BhB,IAAMC,EAAmBvB,IAAMwB,MAAK,kBAAM,uDACpCC,EAAQ,oDAYCC,MARf,WACI,IAAMtB,EFAV,WACE,IAAMuB,EAAU3B,IAAM4B,WAAW7B,GACjC,QAAgB8B,IAAZF,EACF,MAAM,IAAIG,MAAJ,8CAER,OAAOH,EELQI,GACb,OACE,cAAC,IAAMC,SAAP,CAAgBC,SAAU,cAACzB,EAAD,IAA1B,SACGJ,EAAO,cAACmB,EAAD,IAAuB,cAACE,EAAD,OCFxBS,MAPf,YAAmC,IAAZC,EAAW,EAAXA,SACrB,OACE,cAAC,IAAD,UACE,cAACjC,EAAD,UAAeiC,OCDrBC,IAASC,OACP,cAAC,EAAD,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,U,sKCPpBC,EAAcvC,0BAEpB,SAASwC,EAActC,GAEnB,MAAgCuC,YAAO,mBAA/BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,OAEfC,EAAW,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,sEACEC,MAAM,sBAAuB,CAC3CC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBC,MAAOP,EAAWQ,UAEtBC,QAAS,CACL,eAAgB,sBAPR,cACVC,EADU,gBAUGA,EAAIC,OAVP,YAUVf,EAVU,QAWRC,MAXQ,sBAWK,IAAId,MAAMa,EAAKC,OAXpB,OAYhBC,IAZgB,2CAAH,sDAeXc,EAAM,uCAAG,sBAAAX,EAAA,sEACLC,MAAM,sBAAuB,CAC/BC,OAAQ,WAFD,OAIXL,IAJW,2CAAH,qDAOZ,OACI,cAACL,EAAYlC,SAAb,aAAsBC,MAAO,CACzBH,KAAMuC,EACNC,MAAOA,EACPE,YAAaA,EACba,OAAQA,IACLxD,IAIf,IAAME,EAAU,WACd,IAAMsB,EAAU3B,IAAM4B,WAAWY,GACjC,QAAgBX,IAAZF,EACF,MAAM,IAAIG,MAAJ,8CAER,OAAOH,K","file":"static/js/main.7d8dcba3.chunk.js","sourcesContent":["import React from 'react'\r\nimport {useAuth} from '../components/AuthContext/authContext.js'\r\n\r\nconst UserContext = React.createContext()\r\n\r\nfunction UserProvider(props) {\r\n  const {user} = useAuth();\r\n  return <UserContext.Provider value={user} {...props} />\r\n}\r\n\r\nfunction useUser() {\r\n  const context = React.useContext(UserContext)\r\n  if (context === undefined) {\r\n    throw new Error(`useUser must be used within a UserProvider`)\r\n  }\r\n  return context\r\n}\r\n\r\nexport {UserProvider, useUser}\r\n","import {FaSpinner} from 'react-icons/fa'\r\nimport styled from '@emotion/styled/macro'\r\nimport {keyframes} from '@emotion/react'\r\n\r\nexport default function FullPageSpinner() {\r\n  return (\r\n    <div\r\n      css={{\r\n        fontSize: '4em',\r\n        height: '100vh',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      <Spinner />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst spin = keyframes({\r\n  '0%': {transform: 'rotate(0deg)'},\r\n  '100%': {transform: 'rotate(360deg)'},\r\n})\r\n\r\n\r\nconst Spinner = styled(FaSpinner)({\r\n  animation: `${spin} 1s linear infinite`,\r\n})\r\nSpinner.defaultProps = {\r\n  'aria-label': 'loading',\r\n}\r\n","import './App.css';\nimport React from 'react';\nimport {useUser} from './context/user-context.js'\nimport FullPageSpinner from './components/lib.js'\nconst AuthenticatedApp = React.lazy(() => import('./authenticated-app'))\nconst Login = import('./components/Login/login.js')\n\n\n\nfunction App() {\n    const user = useUser();\n    return (\n      <React.Suspense fallback={<FullPageSpinner />}>\n        {user ? <AuthenticatedApp /> : <Login />}\n      </React.Suspense>\n    )  }\n\nexport default App;\n","import * as React from 'react'\r\nimport {AuthProvider} from '../components/AuthContext/authContext.js'\r\nimport {UserProvider} from './user-context'\r\n\r\nfunction AppProviders({children}) {\r\n  return (\r\n    <AuthProvider>\r\n      <UserProvider>{children}</UserProvider>\r\n    </AuthProvider>\r\n  )\r\n}\r\nexport default AppProviders\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport AppProviders from './context/AppProviders.js'\n\nReactDOM.render(\n  <AppProviders>\n      <App />\n  </AppProviders>,\n  document.getElementById('root'),\n);\n","import React, { createContext, useContext } from \"react\"\r\nimport useSWR from \"swr\"\r\n\r\nconst AuthContext = createContext()\r\n\r\nfunction AuthProvider (props) {\r\n\r\n    const { data, error, mutate } = useSWR(`/api/v1/auth/me`)\r\n\r\n    const googleLogIn = async googleData => {\r\n        const res = await fetch(\"/api/v1/auth/google\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                token: googleData.tokenId\r\n            }),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n        const data = await res.json()\r\n        if(data.error) throw new Error(data.error)\r\n        mutate()\r\n    }\r\n\r\n    const logOut = async () => {\r\n        await fetch(\"/api/v1/auth/logout\", {\r\n            method: \"DELETE\"\r\n        })\r\n        mutate()\r\n    }\r\n\r\n    return(\r\n        <AuthContext.Provider value={{\r\n            user: data,\r\n            error: error,\r\n            googleLogIn: googleLogIn,\r\n            logOut: logOut\r\n        }} {...props}/>\r\n    )\r\n}\r\n\r\nconst useAuth = () => {\r\n  const context = React.useContext(AuthContext)\r\n  if (context === undefined) {\r\n    throw new Error(`useAuth must be used within a AuthProvider`)\r\n  }\r\n  return context\r\n}\r\n\r\nexport {AuthProvider, useAuth}\r\n"],"sourceRoot":""}