{"version":3,"sources":["components/lib.js","authenticated-app.js","App.js","index.js","components/AuthContext/authContext.js"],"names":["FullPageSpinner","css","fontSize","height","display","flexDirection","justifyContent","alignItems","Spinner","spin","keyframes","transform","FaSpinner","animation","defaultProps","AuthenticatedApp","Login","React","App","user","useAuthState","console","log","fallback","ReactDOM","render","document","getElementById","AuthContext","createContext","AuthProvider","props","useSWR","data","error","mutate","googleLogIn","googleData","a","fetch","method","body","JSON","stringify","token","tokenId","headers","res","json","Error","history","push","logOut","Provider","value","state","useContext","isPending","status","isError","isSuccess","isAuthenticated"],"mappings":"0OAIe,SAASA,IACtB,OACE,qBACEC,IAAK,CACHC,SAAU,MACVC,OAAQ,QACRC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,UAPhB,SAUE,cAACC,EAAD,MAKN,IAAMC,EAAOC,YAAU,CACrB,KAAM,CAACC,UAAW,gBAClB,OAAQ,CAACA,UAAW,oBAIhBH,EAAU,YAAOI,IAAP,qBAAkB,CAChCC,UAAU,GAAD,OAAKJ,EAAL,wBADK,IAGhBD,EAAQM,aAAe,CACrB,aAAc,W,0BCzBD,SAASC,IACtB,MACE,cCFJ,IAAMC,EAAQC,QAAW,kBAAM,uDAWhBC,MAVf,WACI,IAAMC,EAAOC,cAEb,OADAC,QAAQC,IAAIH,GAEZ,cAAC,IAAD,UACE,cAAC,WAAD,CAAgBI,SAAU,cAACvB,EAAD,IAA1B,SACGmB,EAAO,cAACJ,EAAD,IAAuB,cAACC,EAAD,SCRvCQ,IAASC,OACH,cAAC,EAAD,IACJC,SAASC,eAAe,U,yKCJpBC,EAAcC,0BAEpB,SAASC,EAAcC,GAAQ,IAAD,OAE1B,EAAgCC,YAAO,mBAA/BC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,OAEfC,EAAW,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,sEACEC,MAAM,sBAAuB,CAC3CC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBC,MAAOP,EAAWQ,UAEtBC,QAAS,CACL,eAAgB,sBAPR,cACVC,EADU,gBAUGA,EAAIC,OAVP,YAUVf,EAVU,QAWRC,MAXQ,sBAWK,IAAIe,MAAMhB,EAAKC,OAXpB,OAYhBC,IACA,EAAKJ,MAAMmB,QAAQC,KAAK,KAbR,4CAAH,sDAgBXC,EAAM,uCAAG,sBAAAd,EAAA,sEACLC,MAAM,sBAAuB,CAC/BC,OAAQ,WAFD,OAIXL,IAJW,2CAAH,qDAOZ,OACI,cAACP,EAAYyB,SAAb,aAAsBC,MAAO,CACzBnC,KAAMc,EACNC,MAAOA,EACPE,YAAaA,EACbgB,OAAQA,IACLrB,IAIf,SAASX,IACP,IAAMmC,EAAQtC,IAAMuC,WAAW5B,GACzB6B,EAA6B,YAAjBF,EAAMG,OAClBC,EAA2B,UAAjBJ,EAAMG,OAChBE,EAA6B,YAAjBL,EAAMG,OAClBG,EAAkBN,EAAMpC,MAAQyC,EACtC,OAAO,2BACFL,GADL,IAEEE,YACAE,UACAC,YACAC,uB","file":"static/js/main.ee1b9c03.chunk.js","sourcesContent":["import {FaSpinner} from 'react-icons/fa'\r\nimport styled from '@emotion/styled/macro'\r\nimport {keyframes} from '@emotion/react'\r\n\r\nexport default function FullPageSpinner() {\r\n  return (\r\n    <div\r\n      css={{\r\n        fontSize: '4em',\r\n        height: '100vh',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n      }}\r\n    >\r\n      <Spinner />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst spin = keyframes({\r\n  '0%': {transform: 'rotate(0deg)'},\r\n  '100%': {transform: 'rotate(360deg)'},\r\n})\r\n\r\n\r\nconst Spinner = styled(FaSpinner)({\r\n  animation: `${spin} 1s linear infinite`,\r\n})\r\nSpinner.defaultProps = {\r\n  'aria-label': 'loading',\r\n}\r\n","import React from 'react';\r\nimport { Formik} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { BrowserRouter as Router, Switch, Route, Link} from 'react-router-dom'\r\nimport { Form, Input, InputNumber, Checkbox } from 'formik-antd'\r\n\r\nexport default function AuthenticatedApp() {\r\n  return (\r\n    \"Hello World\"\r\n    /* <div>\r\n      <div>\r\n          <Router>\r\n            <div>\r\n                <nav>\r\n                  <ul>\r\n                      <li>\r\n                        <Link to=\"/\">\r\n                        Home</Link>\r\n                      </li>\r\n                      <li>\r\n                        <Link to=\"/samplereq\">\r\n                        New Sample Request</Link>\r\n                      </li>\r\n                      <li>\r\n                        <Link to=\"/ship\">\r\n                        Outstanding Request</Link>\r\n                      </li>\r\n                  </ul>\r\n                </nav>\r\n                <Switch>\r\n                  <Route path=\"/ship\">\r\n                      <Ship />\r\n                  </Route>\r\n                  <Route path=\"/samplereq\">\r\n                      <SampleReq />\r\n                  </Route>\r\n                  <Route path=\"/\">\r\n                      <AuthenticatedApp />\r\n                  </Route>\r\n                </Switch>\r\n            </div>\r\n          </Router>\r\n      </div>\r\n      <div className=\"container centered justify-content-center\">\r\n          <div className=\"col-xs-1 col-md-8\">\r\n            <div className=\"row text-center justify-content-center\">\r\n                <h1> Internal Sample Request System </h1>\r\n            </div>\r\n          </div>\r\n      </div>\r\n   </div> */\r\n );\r\n}\r\n\r\nfunction Ship(){\r\n  return(\r\n    \"todo\"\r\n  )\r\n}\r\n\r\nfunction SampleReq(){\r\n  return(\r\n    <div className=\"container centered justify-content-center\">\r\n    <div className=\"col-xs-1 col-md-8\">\r\n       <div className=\"row text-center justify-content-center\">\r\n        <h1> Internal Sample Request System </h1>\r\n        <Formik\r\n          initialValues={{ firstName: '', lastName: '', email: '' , semail:''}}\r\n          validationSchema={Yup.object({\r\n            fname: Yup.string()\r\n            .max(15, 'Must be 15 characters or less')\r\n            .required('Required'),\r\n            lname: Yup.string()\r\n            .max(20, 'Must be 20 characters or less')\r\n            .required('Required'),\r\n            cemail: Yup.string().email('Invalid email address').required('Required'),\r\n            semail: Yup.string().email('Invalid email address').required('Required'),\r\n          })}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        fetch(\"/api/samplereqpost\",{\r\n          method:\"POST\",\r\n          body: JSON.stringify(values)\r\n        }).then(res => {\r\n          alert(res);\r\n        });\r\n        setTimeout(() => {\r\n          alert(JSON.stringify(values, null, 2));\r\n          setSubmitting(false);\r\n        }, 400);\r\n      }}\r\n    >\r\n      <Form>\r\n      <Form.Item name='fname'>\r\n        <label htmlFor=\"fname\">First Name</label>\r\n        <Input name=\"fname\" type=\"text\" />\r\n      </Form.Item>\r\n      <Form.Item name='lname'>\r\n        <label htmlFor=\"lname\">Last Name</label>\r\n        <Input name=\"lname\" type=\"text\" />\r\n      </Form.Item>\r\n      <Form.Item name='cemail'>\r\n        <label htmlFor=\"cemail\">Customer Email Address</label>\r\n        <Input name=\"cemail\" type=\"email\" />\r\n      </Form.Item>\r\n      <Form.Item name='semail'>\r\n        <label htmlFor=\"semail\">Sales Rep Email Address</label>\r\n        <Input name=\"semail\" type=\"email\" />\r\n      </Form.Item>\r\n        <Input\r\n          addonBefore=\"Address Line 1\"\r\n          name=\"address.line1\"\r\n        />\r\n        <Input\r\n          addonBefore=\"Address Line 2\"\r\n          name=\"address.line2\"\r\n        />\r\n        <Input\r\n          addonBefore=\"Address Line 3\"\r\n          name=\"address.line3\"\r\n        />\r\n        <Input\r\n          addonBefore=\"city\"\r\n          name=\"address.city\"\r\n        />\r\n        <Input\r\n          addonBefore=\"State\"\r\n          name=\"address.state\"\r\n        />\r\n        <Input\r\n          addonBefore=\"Zip Code\"\r\n          name=\"address.zip\"\r\n        />\r\n        <Input.TextArea name=\"samples\" placeholder=\"Requested Samples\" />\r\n\r\n        // We'll use this later, for now, text area will be fine\r\n\r\n        <button type=\"submit\">Submit</button>\r\n      </Form>\r\n    </Formik>\r\n        </div>\r\n        </div>\r\n        </div>\r\n    )}\r\n","import './App.css';\r\nimport * as React from 'react';\r\nimport {useAuthState} from './components/AuthContext/authContext.js'\r\nimport FullPageSpinner from './components/lib.js'\r\nimport {AuthProvider} from './components/AuthContext/authContext.js'\r\nimport AuthenticatedApp from './authenticated-app'\r\nconst Login = React.lazy(() => import('./components/Login/login'))\r\nfunction App() {\r\n    const user = useAuthState();\r\n    console.log(user);\r\n    return (\r\n    <AuthProvider>\r\n      <React.Suspense fallback={<FullPageSpinner />}>\r\n        {user ? <AuthenticatedApp /> : <Login />}\r\n      </React.Suspense>\r\n    </AuthProvider>\r\n    )  }\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n      <App />,\n  document.getElementById('root'),\n);\n","import React, { createContext, useContext } from \"react\"\r\nimport useSWR from \"swr\"\r\n\r\nconst AuthContext = createContext();\r\n\r\nfunction AuthProvider (props) {\r\n\r\n    const { data, error, mutate } = useSWR(`/api/v1/auth/me`)\r\n\r\n    const googleLogIn = async googleData => {\r\n        const res = await fetch(\"/api/v1/auth/google\", {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                token: googleData.tokenId\r\n            }),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        })\r\n        const data = await res.json()\r\n        if(data.error) throw new Error(data.error)\r\n        mutate()\r\n        this.props.history.push('/')\r\n    }\r\n\r\n    const logOut = async () => {\r\n        await fetch(\"/api/v1/auth/logout\", {\r\n            method: \"DELETE\"\r\n        })\r\n        mutate()\r\n    }\r\n\r\n    return(\r\n        <AuthContext.Provider value={{\r\n            user: data,\r\n            error: error,\r\n            googleLogIn: googleLogIn,\r\n            logOut: logOut\r\n        }} {...props}/>\r\n    )\r\n}\r\n\r\nfunction useAuthState() {\r\n  const state = React.useContext(AuthContext)\r\n  const isPending = state.status === 'pending'\r\n  const isError = state.status === 'error'\r\n  const isSuccess = state.status === 'success'\r\n  const isAuthenticated = state.user && isSuccess\r\n  return {\r\n    ...state,\r\n    isPending,\r\n    isError,\r\n    isSuccess,\r\n    isAuthenticated,\r\n  }\r\n}\r\n\r\nexport {AuthProvider, useAuthState}\r\n"],"sourceRoot":""}